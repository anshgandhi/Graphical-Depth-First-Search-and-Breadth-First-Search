/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.Graphics;

import javax.swing.JOptionPane;

/**
 *
 * @author Ansh
 */

@SuppressWarnings("serial")
public class DFS_BFS_Mirror extends javax.swing.JFrame
{

    /**
     * Creates new form DFS_BFS_Mirror
     */
    boolean mousepress=false;
    boolean mouserelease=false;
    
    private static int top=0;
    private static int front=0;
    private static int rear=0;
    private static int z=0;             //counter of number of vertices
    private int iamthenode;             //preset() will return it as an index
    private int nodea,nodeb;            //for drawing line between two nodes
    
    
    private String[] name={"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"};
    
    private int[] queue=new int[25];
    private int[] stack=new int[25];
    private int[][] adj=new int[15][15];
    private int[] nodex=new int[15];
    private int[] nodey=new int[15];
    private int[] visited=new int[15];
    
    public DFS_BFS_Mirror() {
        
        initComponents();
        initializing();
    }
    
    private void initializing()
    {
        for(int i=0;i<15;i++)
            for(int j=0;j<15;j++)
                adj[i][j]=0;
        for(int j=0;j<15;j++)
        {
                visited[j]=-1;
                nodex[j]=0;
                nodey[j]=0;
        }
        mousepress=false;
        mouserelease=false;
        top=0;
        z=0;
        front=-1;
        rear=-1;
        iamthenode=nodea=nodeb=0;
        adj_list.setText("");
        adj_matrix.setText("");
        draw_graph.removeAll();
        draw_graph.repaint();
        output_graph.removeAll();
        output_graph.repaint();
        adj_matrix.removeAll();
        adj_matrix.repaint();
        tolerance.setText("");
       a_list.removeAll();
       a_list.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        draw_graph = new javax.swing.JPanel();
        output_graph = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        adj_matrix = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        adj_list = new javax.swing.JTextArea();
        bfs_button = new javax.swing.JButton();
        dfs_button = new javax.swing.JButton();
        tolerance = new javax.swing.JTextField();
        reset_button = new javax.swing.JButton();
        mirror_button = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        a_list = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Depth First, Breadth First and Mirror Image");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        draw_graph.setBackground(new java.awt.Color(207, 226, 245));
        draw_graph.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        draw_graph.setMinimumSize(new java.awt.Dimension(235, 5));
        draw_graph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                draw_graphMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                draw_graphMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                draw_graphMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout draw_graphLayout = new javax.swing.GroupLayout(draw_graph);
        draw_graph.setLayout(draw_graphLayout);
        draw_graphLayout.setHorizontalGroup(
            draw_graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );
        draw_graphLayout.setVerticalGroup(
            draw_graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        output_graph.setBackground(new java.awt.Color(255, 255, 167));
        output_graph.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        output_graph.setMinimumSize(new java.awt.Dimension(235, 5));

        javax.swing.GroupLayout output_graphLayout = new javax.swing.GroupLayout(output_graph);
        output_graph.setLayout(output_graphLayout);
        output_graphLayout.setHorizontalGroup(
            output_graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );
        output_graphLayout.setVerticalGroup(
            output_graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        adj_matrix.setColumns(20);
        adj_matrix.setEditable(false);
        adj_matrix.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        adj_matrix.setRows(5);
        adj_matrix.setBorder(javax.swing.BorderFactory.createTitledBorder("\t\tAdjacency Matrix"));
        adj_matrix.setKeymap(null);
        adj_matrix.setMaximumSize(new java.awt.Dimension(236, 110));
        jScrollPane1.setViewportView(adj_matrix);

        adj_list.setColumns(20);
        adj_list.setEditable(false);
        adj_list.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        adj_list.setRows(5);
        adj_list.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjacency List"));
        adj_list.setMaximumSize(new java.awt.Dimension(236, 110));
        jScrollPane2.setViewportView(adj_list);

        bfs_button.setText("BFS");
        bfs_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bfs_buttonMouseClicked(evt);
            }
        });
        bfs_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfs_buttonActionPerformed(evt);
            }
        });

        dfs_button.setText("DFS");
        dfs_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dfs_buttonMouseClicked(evt);
            }
        });

        tolerance.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        tolerance.setBorder(javax.swing.BorderFactory.createTitledBorder("Start from:"));

        reset_button.setText("RESET");
        reset_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_buttonActionPerformed(evt);
            }
        });

        mirror_button.setText("Mirror");
        mirror_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirror_buttonActionPerformed(evt);
            }
        });

        jButton1.setText("Rules");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jLabel1.setText("Made By: Ansh Gandhi");

        a_list.setBackground(new java.awt.Color(204, 213, 79));
        a_list.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout a_listLayout = new javax.swing.GroupLayout(a_list);
        a_list.setLayout(a_listLayout);
        a_listLayout.setHorizontalGroup(
            a_listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );
        a_listLayout.setVerticalGroup(
            a_listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(draw_graph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reset_button)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(mirror_button))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(tolerance, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(dfs_button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bfs_button))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(a_list, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(output_graph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(output_graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(draw_graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(a_list, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bfs_button)
                            .addComponent(mirror_button)
                            .addComponent(dfs_button))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(reset_button))
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void draw_graphMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_draw_graphMouseClicked
        int x,y;
        x=evt.getX();
        y=evt.getY();
        String s=present(x,y);
        if(s.equals("null"))
            drawCircle(x,y);    
    }//GEN-LAST:event_draw_graphMouseClicked

        public void drawCircle(int x,int y){

    Graphics g=this.getGraphics();
    g.setColor(Color.red);
    g.fillOval(x, y,36,36);
    g.setColor(Color.black);
    g.drawString(name[z], x+15, y+23);
    nodex[z]=x;
    nodey[z]=y;
    z++;
}
    
    private void draw_graphMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_draw_graphMousePressed
        int x,y;
        x=evt.getX();
        y=evt.getY();
        String s=present(x,y);
        if(s.equals("null"))
            mousepress=false;
        else
        {
            nodea=iamthenode;
            mousepress=true;
        }
    }//GEN-LAST:event_draw_graphMousePressed
   
    private void draw_graphMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_draw_graphMouseReleased
        int x,y;
        x=evt.getX();
        y=evt.getY();
        String s1=present(x,y);
        if(s1.equals("null"))
        {
            mouserelease=false;
            mousepress=false;
            nodea=0;
            nodeb=0;
            iamthenode=0;
        }
        else
        {
            nodeb=iamthenode;
            mouserelease=true;
        }
        if(mouserelease&&mousepress)
        {
            Graphics g=this.getGraphics();
            g.setColor(Color.red);
            g.drawLine(nodex[nodea]+25,nodey[nodea]+15,nodex[nodeb]+20,nodey[nodeb]+15);
            
            adj[nodea][nodeb]=1;        //Making Adjacency Matrix
            adj[nodeb][nodea]=1;        //Making Adjacency Matrix
            
            String s="    ";                //Printing Adjacency Matrix
            for(int i=0;i<z;i++)
                s=s+name[i]+"  ";
            for(int i=0;i<z;i++)
            {
                s=s+"\n"+name[i]+"| ";
                for(int j=0;j<z;j++)
                    s=s+adj[i][j]+"  ";
                
            }
            adj_matrix.setText(s);
            
            String s2="";                //Printing Adjacency List
            for(int i=0;i<z;i++)
            {
                for(int j=0;j<z;j++)
                {
                    if(adj[i][j]==1)
                        s2=s2+name[i]+"-->"+name[j]+" , ";
                }
                s2=s2+"\n";
            }
            adj_list.setText(s2);
            
            a_repaint();
        }
    }//GEN-LAST:event_draw_graphMouseReleased


    public void a_repaint()
    {
        int ctr_i=0;
        int ctr_j=0;
        Graphics g=a_list.getGraphics();
        a_list.removeAll();
        a_list.update(g);
        for(int i=0;i<z;i++)
            {
                g.setColor(Color.red);
                g.fillRect(20+10*ctr_i,10+10*ctr_j,40,30);
                g.setColor(Color.black);
                g.drawString(name[i],10*ctr_i+30,30+10*ctr_j);
                for(int j=0;j<z;j++)
                {
                    if(adj[i][j]==1)
                    {
                        g.setColor(Color.red);
                        g.fillRect(100+10*ctr_i,10+10*ctr_j,40,30);
                        g.drawLine(40+10*ctr_i,25+10*ctr_j,120+10*ctr_i,25+10*ctr_j);
                        g.setColor(Color.black);
                        g.drawString(name[j],10*ctr_i+120,30+10*ctr_j);
                        ctr_i=ctr_i+10;
                    }
                }
                g.setColor(Color.red);
                g.drawLine(40+10*ctr_i,25+10*ctr_j,80+10*ctr_i,25+10*ctr_j);
                g.drawLine(80+10*ctr_i,25+10*ctr_j,80+10*ctr_i,30+10*ctr_j);
                g.drawLine(70+10*ctr_i,30+10*ctr_j,90+10*ctr_i,30+10*ctr_j);
                g.drawLine(75+10*ctr_i,33+10*ctr_j,85+10*ctr_i,33+10*ctr_j);
                ctr_i=0;
                ctr_j=ctr_j+4;
            }
        
    }
    
    private void dfs_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dfs_buttonMouseClicked

        Graphics clear=output_graph.getGraphics();
        output_graph.removeAll();
        output_graph.update(clear);
        boolean flag=false;
        boolean adj_check=false;
        int connected=0;
        int i;
        int ctr=1;
        String[] options = {"OK"};
        
        for(i=0;i<z;i++)        //check if name exists
        {
            if(name[i].equalsIgnoreCase(tolerance.getText()))
            {
                flag=true;
                break;
            }
        }
        
        for(int m=0;m<z;m++)
        {
            for(int k=0;k<z;k++)
            {
                if(adj[m][k]==1)
                {
                    k=z+1;
                    m=z+1;
                    adj_check=true;
                }
            }
        }
        
        for(int m=0;m<z;m++)
        {
            connected=0;
            for(int k=0;k<z;k++)
                if(adj[m][k]==0)
                    connected++;
            if (connected==z)
                m=z+1;
        }
        
        if(flag&&adj_check&&(connected!=z))
        {
            String s="";
            visited[0]=i;
            while(visited[z-1]==-1)
            {
                for(int k=0;k<z;k++)
                    if(adj[i][k]==1)
                        push(k);
                
                while(search(peek_dfs()))
                    i=pop();
                
                visited[ctr]=pop();
                i=visited[ctr];
                ctr++;          
            }
            for(int m=0;m<z;m++)
                s=(m!=z-1? s+name[visited[m]]+" --> ":s+name[visited[m]]);
            JOptionPane.showOptionDialog(null,s, "Depth First Search", JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options , options[0]);
        }
        
        else
            JOptionPane.showOptionDialog(null,"Please check the following:\n\n1. A Valid Start Point.\n2. Connection between vertices.\n3. An unconnected node.", "Please check", JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options , options[0]);
        
        Graphics g=output_graph.getGraphics();
        Graphics r=output_graph.getGraphics();
        
        //a while loop with if
        
        int m=0;
            while(m<z)
            {
                for(int k=m-1;k>=0;k--)
                {
                    g.setColor(Color.red);
                    if(adj[visited[m]][visited[k]]==1)
                    {
                        g.fillOval(nodex[visited[m]],nodey[visited[m]],36,36);                      
                        g.fillOval(nodex[visited[k]],nodey[visited[k]],36,36);
                        g.drawLine(nodex[visited[m]]+25,nodey[visited[m]]+15,nodex[visited[k]]+20,nodey[visited[k]]+15);
                        g.setColor(Color.black);
                        g.drawString(name[visited[m]],nodex[visited[m]]+15,nodey[visited[m]]+23);
                        g.drawString(name[visited[k]],nodex[visited[k]]+15,nodey[visited[k]]+23);
                        k=-1;
                    }
                }
                m++;
            }
    }//GEN-LAST:event_dfs_buttonMouseClicked

    private void reset_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_buttonActionPerformed
        initializing();
    }//GEN-LAST:event_reset_buttonActionPerformed

    private void bfs_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bfs_buttonMouseClicked

        Graphics clear=output_graph.getGraphics();
        output_graph.removeAll();
        output_graph.update(clear);
        boolean flag=false;
        boolean adj_check=false;
        int i;
        int ctr=1;
        String[] options = {"OK"};
        
        for(i=0;i<z;i++)        //check if name exists
        {
            if(name[i].equalsIgnoreCase(tolerance.getText()))
            {
                flag=true;
                break;
            }
        }
        for(int m=0;m<z;m++)
        {
            for(int k=0;k<z;k++)
                if(adj[m][k]==1)
                {
                    adj_check=true;
                    k=z+1;
                    m=z+1;
                }
        }
                    
        
        
        if(flag&&adj_check)
        {
            reset_visited();

            visited[0]=i;
            while(visited[z-1]==-1)
            {
                for(int k=0;k<z;k++)
                    if(adj[i][k]==1)
                        enqueue(k);
                
                while(search(peek_bfs()))
                    i=dequeue();
                
                visited[ctr]=dequeue();
                i=visited[ctr];
                ctr++;          
            }
            String s="";
            for(int m=0;m<z;m++)
                s=(m!=z-1? s+name[visited[m]]+" --> ":s+name[visited[m]]);
            JOptionPane.showOptionDialog(null,s, "Breadth First Search", JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options , options[0]);
        }
        
        else
            JOptionPane.showOptionDialog(null,"Please check the following:\n\n1. A Valid Start Point.\n2. Connection between vertices.\n3. An unconnected node.", "Please check", JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options , options[0]);
        
        Graphics g=output_graph.getGraphics();
        
        //a while loop with if
        
        int m=0;
            while(m<z)
            {
                for(int k=0;k<m;k++)
                {
                    g.setColor(Color.red);
                    if(adj[visited[m]][visited[k]]==1)
                    {
                        g.fillOval(nodex[visited[m]],nodey[visited[m]],36,36);
                        g.fillOval(nodex[visited[k]],nodey[visited[k]],36,36);
                        g.drawLine(nodex[visited[m]]+25,nodey[visited[m]]+15,nodex[visited[k]]+20,nodey[visited[k]]+15);
                        g.setColor(Color.black);
                        g.drawString(name[visited[m]],nodex[visited[m]]+15,nodey[visited[m]]+23);
                        g.drawString(name[visited[k]],nodex[visited[k]]+15,nodey[visited[k]]+23);
                        k=m+1;
                    }
                }
                m++;
            }
    }//GEN-LAST:event_bfs_buttonMouseClicked

     void enqueue(int ins)
    {
	if (front==-1)
		front=0;
	rear++;
	queue[rear]=ins;
    }
    
    int dequeue()
    {
	int out;
	if (rear==-1||front>rear)
            front=rear=-1;
	out=queue[front];
	front++;
        return out;
    }

    int peek_bfs()
    {
	if (rear==-1||front>rear)
        {
            front=rear=-1;
            return 0;
        }
        else
            return(queue[front]);
    }
    
    void reset_visited()
    {
        for(int i=0;i<15;i++)
            visited[i]=-1;
    }
    
    private void mirror_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirror_buttonActionPerformed

        Graphics clear=output_graph.getGraphics();
        output_graph.removeAll();
        output_graph.update(clear);
        String[] options = {"OK"};
        Graphics g=output_graph.getGraphics();
        if(tolerance.getText().isEmpty())
        {
            g.setColor(Color.black);
            for(int i=0;i<z;i++)
                for(int k=0;k<z;k++)
                    if(adj[i][k]==1)
                        g.drawLine(2*(nodex[0]-nodex[i])+nodex[i]+25,nodey[i]+15,2*(nodex[0]-nodex[k])+nodex[k]+25,nodey[k]+15);
        for(int i=0;i<z;i++)
        {
            g.setColor(Color.red);
            g.fillOval(2*(nodex[0]-nodex[i])+nodex[i],nodey[i],36,36);
            g.setColor(Color.black);
            g.drawString(name[i],2*(nodex[0]-nodex[i])+nodex[i]+15, nodey[i]+23);
        }
        }
        else
            JOptionPane.showOptionDialog(null,"Please clear \"Start from\" field and click again.", "Mirror", JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options , options[0]);
    }//GEN-LAST:event_mirror_buttonActionPerformed

    private void bfs_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfs_buttonActionPerformed
        
      
    }//GEN-LAST:event_bfs_buttonActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String[] options = {"OK"};
        JOptionPane.showOptionDialog(null,"Rules:\n\n1. Click on Blue Screen to create nodes.\n2. Press mouse on any node and Drag mouse to any other node to create an Edge.", "Rules", JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options , options[0]);
    }//GEN-LAST:event_jButton1MouseClicked

private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
    initializing();
}//GEN-LAST:event_formWindowIconified

    public void push(int k)
    {
        stack[top]=k;
        top++;
    }
    public int pop ()
    {
        int y;
        if(top-1<0)
            return -2;
        else
        {
            top=top-1;
            y=stack[top];
            return y;
        }
    }
    public int peek_dfs()
    {
        if(top-1<0)
            return(stack[0]);
        else
            return(stack[top-1]);
    }
    
    public boolean search(int x)
    {
        for(int i=0;i<z;i++)
            if(x==visited[i])
                return true;
        return false;
    }   
    
    public String present(int x,int y){
            for(int i=0;i<z;i++)
                if(Math.pow(x-nodex[i],2)+Math.pow(y-nodey[i],2)-1296<0)
                {
                    iamthenode=i;
                    return "present";
                }
            return("null");
        }
 

    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DFS_BFS_Mirror.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DFS_BFS_Mirror.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DFS_BFS_Mirror.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DFS_BFS_Mirror.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DFS_BFS_Mirror().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel a_list;
    private javax.swing.JTextArea adj_list;
    private javax.swing.JTextArea adj_matrix;
    private javax.swing.JButton bfs_button;
    private javax.swing.JButton dfs_button;
    private javax.swing.JPanel draw_graph;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mirror_button;
    private javax.swing.JPanel output_graph;
    private javax.swing.JButton reset_button;
    private javax.swing.JTextField tolerance;
    // End of variables declaration//GEN-END:variables

}